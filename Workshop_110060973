{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Workshop_110071277.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rajrpatel62499/COMP8967-1-R-2022S-Internship-Project-I/blob/main/Workshop_110060973\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dCr-BQzFsAE7",
        "outputId": "80227559-4e1a-4b26-ab52-e31844d836ec"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.3.5)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2022.1)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.21.6)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"
          ]
        }
      ],
      "source": [
        "pip install pandas"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install --upgrade pandas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h3vkmp1C1wZ3",
        "outputId": "746635de-d1b0-49e1-f81a-e950249d6b95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.3.5)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2022.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.21.6)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "9tLB8EXa13BL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('../content/sample_data/diabetes.csv')"
      ],
      "metadata": {
        "id": "AagfCo7h2A07"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "type(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zsuh_0OX2eYE",
        "outputId": "834f8e8b-1230-4da9-fa1d-3a110f955160"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q4PGhI8J2kDo",
        "outputId": "ebfe714a-868c-428e-b2d4-f8f1ae9911bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(768, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "EJ-554oL2np2",
        "outputId": "ba150f7b-13a9-4489-ec93-752c5526f7d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0            6      148             72             35        0  33.6   \n",
              "1            1       85             66             29        0  26.6   \n",
              "2            8      183             64              0        0  23.3   \n",
              "3            1       89             66             23       94  28.1   \n",
              "4            0      137             40             35      168  43.1   \n",
              "\n",
              "   DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                     0.627   50        1  \n",
              "1                     0.351   31        0  \n",
              "2                     0.672   32        1  \n",
              "3                     0.167   21        0  \n",
              "4                     2.288   33        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2695c340-9b15-4a12-8b69-6489fa2a1624\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2695c340-9b15-4a12-8b69-6489fa2a1624')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2695c340-9b15-4a12-8b69-6489fa2a1624 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2695c340-9b15-4a12-8b69-6489fa2a1624');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "6EUn4Eqm2pc6",
        "outputId": "41318a92-0d3a-494f-bf91-ab7ba78a264c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "763           10      101             76             48      180  32.9   \n",
              "764            2      122             70             27        0  36.8   \n",
              "765            5      121             72             23      112  26.2   \n",
              "766            1      126             60              0        0  30.1   \n",
              "767            1       93             70             31        0  30.4   \n",
              "\n",
              "     DiabetesPedigreeFunction  Age  Outcome  \n",
              "763                     0.171   63        0  \n",
              "764                     0.340   27        0  \n",
              "765                     0.245   30        0  \n",
              "766                     0.349   47        1  \n",
              "767                     0.315   23        0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c969278b-a3b4-4ec5-ad49-5fb75c428d61\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>763</th>\n",
              "      <td>10</td>\n",
              "      <td>101</td>\n",
              "      <td>76</td>\n",
              "      <td>48</td>\n",
              "      <td>180</td>\n",
              "      <td>32.9</td>\n",
              "      <td>0.171</td>\n",
              "      <td>63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>764</th>\n",
              "      <td>2</td>\n",
              "      <td>122</td>\n",
              "      <td>70</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>36.8</td>\n",
              "      <td>0.340</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>765</th>\n",
              "      <td>5</td>\n",
              "      <td>121</td>\n",
              "      <td>72</td>\n",
              "      <td>23</td>\n",
              "      <td>112</td>\n",
              "      <td>26.2</td>\n",
              "      <td>0.245</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>766</th>\n",
              "      <td>1</td>\n",
              "      <td>126</td>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.1</td>\n",
              "      <td>0.349</td>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>767</th>\n",
              "      <td>1</td>\n",
              "      <td>93</td>\n",
              "      <td>70</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>30.4</td>\n",
              "      <td>0.315</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c969278b-a3b4-4ec5-ad49-5fb75c428d61')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c969278b-a3b4-4ec5-ad49-5fb75c428d61 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c969278b-a3b4-4ec5-ad49-5fb75c428d61');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "HQo14ZKb2tlO",
        "outputId": "dd331e92-59f0-4c57-fb66-713983bd2fb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
              "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
              "mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n",
              "std       3.369578   31.972618      19.355807      15.952218  115.244002   \n",
              "min       0.000000    0.000000       0.000000       0.000000    0.000000   \n",
              "25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n",
              "50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n",
              "75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n",
              "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
              "\n",
              "              BMI  DiabetesPedigreeFunction         Age     Outcome  \n",
              "count  768.000000                768.000000  768.000000  768.000000  \n",
              "mean    31.992578                  0.471876   33.240885    0.348958  \n",
              "std      7.884160                  0.331329   11.760232    0.476951  \n",
              "min      0.000000                  0.078000   21.000000    0.000000  \n",
              "25%     27.300000                  0.243750   24.000000    0.000000  \n",
              "50%     32.000000                  0.372500   29.000000    0.000000  \n",
              "75%     36.600000                  0.626250   41.000000    1.000000  \n",
              "max     67.100000                  2.420000   81.000000    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b0153d50-25bd-44fd-a1d2-0804f496b235\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.845052</td>\n",
              "      <td>120.894531</td>\n",
              "      <td>69.105469</td>\n",
              "      <td>20.536458</td>\n",
              "      <td>79.799479</td>\n",
              "      <td>31.992578</td>\n",
              "      <td>0.471876</td>\n",
              "      <td>33.240885</td>\n",
              "      <td>0.348958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.369578</td>\n",
              "      <td>31.972618</td>\n",
              "      <td>19.355807</td>\n",
              "      <td>15.952218</td>\n",
              "      <td>115.244002</td>\n",
              "      <td>7.884160</td>\n",
              "      <td>0.331329</td>\n",
              "      <td>11.760232</td>\n",
              "      <td>0.476951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.078000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>27.300000</td>\n",
              "      <td>0.243750</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>30.500000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>0.372500</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>140.250000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>127.250000</td>\n",
              "      <td>36.600000</td>\n",
              "      <td>0.626250</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>199.000000</td>\n",
              "      <td>122.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>846.000000</td>\n",
              "      <td>67.100000</td>\n",
              "      <td>2.420000</td>\n",
              "      <td>81.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0153d50-25bd-44fd-a1d2-0804f496b235')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b0153d50-25bd-44fd-a1d2-0804f496b235 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b0153d50-25bd-44fd-a1d2-0804f496b235');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.unique(data['Outcome'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vPzY_zE23AsN",
        "outputId": "265e6a7e-0a27-46d8-be73-e6860c539775"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d1 = data[10:15]\n",
        "d1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "3KOTwczL3F1w",
        "outputId": "6910306e-7f3a-47db-87f7-97ed6ad12ec5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "10            4      110             92              0        0  37.6   \n",
              "11           10      168             74              0        0  38.0   \n",
              "12           10      139             80              0        0  27.1   \n",
              "13            1      189             60             23      846  30.1   \n",
              "14            5      166             72             19      175  25.8   \n",
              "\n",
              "    DiabetesPedigreeFunction  Age  Outcome  \n",
              "10                     0.191   30        0  \n",
              "11                     0.537   34        1  \n",
              "12                     1.441   57        0  \n",
              "13                     0.398   59        1  \n",
              "14                     0.587   51        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a0036e61-2b9c-4e03-880c-67b2e7724d2d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>4</td>\n",
              "      <td>110</td>\n",
              "      <td>92</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>37.6</td>\n",
              "      <td>0.191</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>10</td>\n",
              "      <td>168</td>\n",
              "      <td>74</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>0.537</td>\n",
              "      <td>34</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>10</td>\n",
              "      <td>139</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>27.1</td>\n",
              "      <td>1.441</td>\n",
              "      <td>57</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1</td>\n",
              "      <td>189</td>\n",
              "      <td>60</td>\n",
              "      <td>23</td>\n",
              "      <td>846</td>\n",
              "      <td>30.1</td>\n",
              "      <td>0.398</td>\n",
              "      <td>59</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>5</td>\n",
              "      <td>166</td>\n",
              "      <td>72</td>\n",
              "      <td>19</td>\n",
              "      <td>175</td>\n",
              "      <td>25.8</td>\n",
              "      <td>0.587</td>\n",
              "      <td>51</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0036e61-2b9c-4e03-880c-67b2e7724d2d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a0036e61-2b9c-4e03-880c-67b2e7724d2d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a0036e61-2b9c-4e03-880c-67b2e7724d2d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data[:].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "LH7L24K73MF3",
        "outputId": "88c64d53-0c18-4119-a1f8-26940a68c859"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0            6      148             72             35        0  33.6   \n",
              "1            1       85             66             29        0  26.6   \n",
              "2            8      183             64              0        0  23.3   \n",
              "3            1       89             66             23       94  28.1   \n",
              "4            0      137             40             35      168  43.1   \n",
              "\n",
              "   DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                     0.627   50        1  \n",
              "1                     0.351   31        0  \n",
              "2                     0.672   32        1  \n",
              "3                     0.167   21        0  \n",
              "4                     2.288   33        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-adbb2893-0331-4816-8a0a-025b28307279\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-adbb2893-0331-4816-8a0a-025b28307279')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-adbb2893-0331-4816-8a0a-025b28307279 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-adbb2893-0331-4816-8a0a-025b28307279');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d2 = data.iloc[:,0] \n",
        "d2.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OCAhncnr3RVz",
        "outputId": "f0c7e66b-27c8-4266-db67-c7540f661d0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    6\n",
              "1    1\n",
              "2    8\n",
              "3    1\n",
              "4    0\n",
              "Name: Pregnancies, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f1 = data.iloc[0:5, [0,1]]\n",
        "f1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "lWLrt2eJ3ZCK",
        "outputId": "b13f1ad1-b6af-4ead-c2b6-cc28c4fc55f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pregnancies  Glucose\n",
              "0            6      148\n",
              "1            1       85\n",
              "2            8      183\n",
              "3            1       89\n",
              "4            0      137"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-969b5784-f87e-481f-9481-4f989c66b916\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-969b5784-f87e-481f-9481-4f989c66b916')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-969b5784-f87e-481f-9481-4f989c66b916 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-969b5784-f87e-481f-9481-4f989c66b916');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "label = data.iloc[0:5,-1]\n",
        "label"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rCjT5HOo3k-m",
        "outputId": "7e858521-cce9-41f6-d8d0-2baa6a68eb29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1\n",
              "1    0\n",
              "2    1\n",
              "3    0\n",
              "4    1\n",
              "Name: Outcome, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "concat = pd.concat([f1,label],axis=1)\n",
        "concat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "EUi_ATn-3pZJ",
        "outputId": "8a4ce171-5a6d-47fd-f678-7862ecdbe221"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pregnancies  Glucose  Outcome\n",
              "0            6      148        1\n",
              "1            1       85        0\n",
              "2            8      183        1\n",
              "3            1       89        0\n",
              "4            0      137        1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-33545d87-8892-404f-9016-5f486c6cb9da\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33545d87-8892-404f-9016-5f486c6cb9da')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-33545d87-8892-404f-9016-5f486c6cb9da button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-33545d87-8892-404f-9016-5f486c6cb9da');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "concat.to_csv('slicedData.csv', index=False)"
      ],
      "metadata": {
        "id": "1gGZIgYI3ysY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "(data['Outcome']==1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_s1MNrW-33as",
        "outputId": "38b0f43c-b43d-4285-d4ac-bdddcba800ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       True\n",
              "1      False\n",
              "2       True\n",
              "3      False\n",
              "4       True\n",
              "       ...  \n",
              "763    False\n",
              "764    False\n",
              "765    False\n",
              "766     True\n",
              "767    False\n",
              "Name: Outcome, Length: 768, dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p = data[data['Outcome']==1]\n",
        "n = data[data['Outcome']==0]"
      ],
      "metadata": {
        "id": "DjLe1L864Aoe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "p.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "kIWc9CC44GZ8",
        "outputId": "8b11ce28-1815-4d96-c4a8-8a58207867ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0            6      148             72             35        0  33.6   \n",
              "2            8      183             64              0        0  23.3   \n",
              "4            0      137             40             35      168  43.1   \n",
              "6            3       78             50             32       88  31.0   \n",
              "8            2      197             70             45      543  30.5   \n",
              "\n",
              "   DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                     0.627   50        1  \n",
              "2                     0.672   32        1  \n",
              "4                     2.288   33        1  \n",
              "6                     0.248   26        1  \n",
              "8                     0.158   53        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46219103-2fec-426c-83c6-869a2123afb3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>3</td>\n",
              "      <td>78</td>\n",
              "      <td>50</td>\n",
              "      <td>32</td>\n",
              "      <td>88</td>\n",
              "      <td>31.0</td>\n",
              "      <td>0.248</td>\n",
              "      <td>26</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2</td>\n",
              "      <td>197</td>\n",
              "      <td>70</td>\n",
              "      <td>45</td>\n",
              "      <td>543</td>\n",
              "      <td>30.5</td>\n",
              "      <td>0.158</td>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46219103-2fec-426c-83c6-869a2123afb3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-46219103-2fec-426c-83c6-869a2123afb3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-46219103-2fec-426c-83c6-869a2123afb3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X2G4s8et4Mze",
        "outputId": "5b6633d7-0c44-4ddb-ac87-fe6650c72027"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(268, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(4, figsize=(6, 4))\n",
        "plt.scatter(pos.iloc[:,1], pos.iloc[:,3], c='r', label='pos')\n",
        "plt.scatter(neg.iloc[:,1], neg.iloc[:,3], c='b', label='neg')\n",
        "plt.xlabel('positive',fontsize=10)\n",
        "plt.ylabel('negative',fontsize=10)\n",
        "plt.xticks(fontsize=10)\n",
        "plt.yticks(fontsize=10)\n",
        "plt.title('Diabetic vs. Non Diabetic',fontsize=20)\n",
        "plt.legend(prop={'size': 10})\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "VZ95sB6h4TlW",
        "outputId": "1edb1c1b-3801-4acb-c546-85729d7003e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "sns.relplot(x=\"BloodPressure\", y=\"BMI\",  hue='Outcome', style='Outcome', palette=\"ch:2,r=.9,l=.55\", data=data);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "FLPdLJPu4ZvV",
        "outputId": "7954ff20-a7ec-471e-f1c1-75351466dd92"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 413.25x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig = plt.figure(figsize = (6,6))\n",
        "ax = fig.gca()\n",
        "data.hist(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "J_wD1jJL4__p",
        "outputId": "c78fec93-5b5c-4fcc-c487-f5197fa71b94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: UserWarning: To output multiple subplots, the figure containing the passed axes is being cleared\n",
            "  \"\"\"\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install -U scikit-learn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iDXZjPab5EBF",
        "outputId": "32793388-013f-468e-f0c3-e25be2f45910"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (1.0.2)\n",
            "Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.4.1)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.1.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (3.1.0)\n",
            "Requirement already satisfied: numpy>=1.14.6 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.21.6)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "d2 = pd.read_csv(\"/content/sample_data/diabetes.csv\")\n",
        "\n",
        "d2.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "WLLOPsGz5Gyf",
        "outputId": "6f41952d-a706-4893-adf9-74401e4c45fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0            6      148             72             35        0  33.6   \n",
              "1            1       85             66             29        0  26.6   \n",
              "2            8      183             64              0        0  23.3   \n",
              "3            1       89             66             23       94  28.1   \n",
              "4            0      137             40             35      168  43.1   \n",
              "\n",
              "   DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                     0.627   50        1  \n",
              "1                     0.351   31        0  \n",
              "2                     0.672   32        1  \n",
              "3                     0.167   21        0  \n",
              "4                     2.288   33        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9bbbd9c2-fe40-4450-a75a-2d182a29846f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9bbbd9c2-fe40-4450-a75a-2d182a29846f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9bbbd9c2-fe40-4450-a75a-2d182a29846f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9bbbd9c2-fe40-4450-a75a-2d182a29846f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = d2.iloc[:,0:-1] # features\n",
        "y = d2.iloc[:,-1] #label\n",
        "\n",
        "print(X.head(),'\\n')\n",
        "print(y.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mBH8OnHm5TkA",
        "outputId": "f04f14d6-352d-4e57-bed6-d1cd19732a1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
            "0            6      148             72             35        0  33.6   \n",
            "1            1       85             66             29        0  26.6   \n",
            "2            8      183             64              0        0  23.3   \n",
            "3            1       89             66             23       94  28.1   \n",
            "4            0      137             40             35      168  43.1   \n",
            "\n",
            "   DiabetesPedigreeFunction  Age  \n",
            "0                     0.627   50  \n",
            "1                     0.351   31  \n",
            "2                     0.672   32  \n",
            "3                     0.167   21  \n",
            "4                     2.288   33   \n",
            "\n",
            "0    1\n",
            "1    0\n",
            "2    1\n",
            "3    0\n",
            "4    1\n",
            "Name: Outcome, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "s-kNcbgW5ah0",
        "outputId": "60806024-618e-41eb-d567-90f08b3e0c48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
              "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
              "mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n",
              "std       3.369578   31.972618      19.355807      15.952218  115.244002   \n",
              "min       0.000000    0.000000       0.000000       0.000000    0.000000   \n",
              "25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n",
              "50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n",
              "75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n",
              "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
              "\n",
              "              BMI  DiabetesPedigreeFunction         Age  \n",
              "count  768.000000                768.000000  768.000000  \n",
              "mean    31.992578                  0.471876   33.240885  \n",
              "std      7.884160                  0.331329   11.760232  \n",
              "min      0.000000                  0.078000   21.000000  \n",
              "25%     27.300000                  0.243750   24.000000  \n",
              "50%     32.000000                  0.372500   29.000000  \n",
              "75%     36.600000                  0.626250   41.000000  \n",
              "max     67.100000                  2.420000   81.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-deb22437-c1e3-4317-88fc-66989399a3fb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.845052</td>\n",
              "      <td>120.894531</td>\n",
              "      <td>69.105469</td>\n",
              "      <td>20.536458</td>\n",
              "      <td>79.799479</td>\n",
              "      <td>31.992578</td>\n",
              "      <td>0.471876</td>\n",
              "      <td>33.240885</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.369578</td>\n",
              "      <td>31.972618</td>\n",
              "      <td>19.355807</td>\n",
              "      <td>15.952218</td>\n",
              "      <td>115.244002</td>\n",
              "      <td>7.884160</td>\n",
              "      <td>0.331329</td>\n",
              "      <td>11.760232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.078000</td>\n",
              "      <td>21.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>27.300000</td>\n",
              "      <td>0.243750</td>\n",
              "      <td>24.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>30.500000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>0.372500</td>\n",
              "      <td>29.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>140.250000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>127.250000</td>\n",
              "      <td>36.600000</td>\n",
              "      <td>0.626250</td>\n",
              "      <td>41.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>199.000000</td>\n",
              "      <td>122.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>846.000000</td>\n",
              "      <td>67.100000</td>\n",
              "      <td>2.420000</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-deb22437-c1e3-4317-88fc-66989399a3fb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-deb22437-c1e3-4317-88fc-66989399a3fb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-deb22437-c1e3-4317-88fc-66989399a3fb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig = plt.figure(figsize = (7,7))\n",
        "ax = fig.gca()\n",
        "d2.hist(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "qxlEq8xI5hEH",
        "outputId": "d6754501-f981-4af2-e3f9-50463995c7d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: UserWarning: To output multiple subplots, the figure containing the passed axes is being cleared\n",
            "  \"\"\"\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 504x504 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import preprocessing\n",
        "\n",
        "s1 = preprocessing.MinMaxScaler()\n",
        "s1.fit(X)\n",
        "X_nor = s1.transform(X)\n",
        "\n",
        "X = preprocessing.normalize(X, norm='l2')\n",
        "\n",
        "print(type(X_nor))\n",
        "\n",
        "print('After Normalization')\n",
        "print((pd.DataFrame(X_nor)).head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FpmWMBOP5nQ5",
        "outputId": "61fd2c04-fce7-4c05-9b5d-8a8c77b580e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'numpy.ndarray'>\n",
            "After Normalization\n",
            "          0         1         2         3         4         5         6  \\\n",
            "0  0.352941  0.743719  0.590164  0.353535  0.000000  0.500745  0.234415   \n",
            "1  0.058824  0.427136  0.540984  0.292929  0.000000  0.396423  0.116567   \n",
            "2  0.470588  0.919598  0.524590  0.000000  0.000000  0.347243  0.253629   \n",
            "3  0.058824  0.447236  0.540984  0.232323  0.111111  0.418778  0.038002   \n",
            "4  0.000000  0.688442  0.327869  0.353535  0.198582  0.642325  0.943638   \n",
            "\n",
            "          7  \n",
            "0  0.483333  \n",
            "1  0.166667  \n",
            "2  0.183333  \n",
            "3  0.000000  \n",
            "4  0.200000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib\n",
        "\n",
        "matplotlib.style.use('ggplot')\n",
        "from sklearn import preprocessing\n",
        "\n",
        "scaler = preprocessing.Normalizer()\n",
        "scaled_df = scaler.fit_transform(d2)\n",
        "scaled_df = pd.DataFrame(scaled_df, columns=d2.columns)\n",
        "\n",
        "fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(6, 5))\n",
        "\n",
        "ax1.set_title('Before Scaling')\n",
        "sns.kdeplot(d2['BMI'], ax=ax1)\n",
        "sns.kdeplot(d2['BloodPressure'], ax=ax1)\n",
        "\n",
        "ax2.set_title('After Standard Scaler')\n",
        "sns.kdeplot(scaled_df['BMI'], ax=ax2)\n",
        "sns.kdeplot(scaled_df['BloodPressure'], ax=ax2)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354
        },
        "id": "yoDnQVc-56-m",
        "outputId": "f97fabd9-c533-4104-f497-f3c9a66227db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x360 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "trainSet = d2.sample(frac = 0.8)\n",
        "print(trainSet.shape)\n",
        "trainSet.head()"
      ],
      "metadata": {
        "id": "pFwPV1gv6NTn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trainSet = d2.sample(n = 2, random_state = None) \n",
        "print(trainSet.shape)\n",
        "trainSet.head()"
      ],
      "metadata": {
        "id": "W_7WkStw6Poh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X_nor, y, test_size=0.3, random_state=None)\n",
        "\n",
        "print('X_train.shape')\n",
        "print(X_train.shape, '\\n')\n",
        "print('X_test.shape')\n",
        "print(X_test.shape, '\\n')\n",
        "print('X_train.head')\n",
        "print(pd.DataFrame(X_train).head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KFJZCBzU6U1b",
        "outputId": "35dcb03b-8375-4d00-db9f-56dca94919fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train.shape\n",
            "(537, 8) \n",
            "\n",
            "X_test.shape\n",
            "(231, 8) \n",
            "\n",
            "X_train.head\n",
            "          0         1         2         3         4         5         6  \\\n",
            "0  0.058824  0.417085  0.557377  0.000000  0.000000  0.271237  0.233134   \n",
            "1  0.176471  0.437186  0.491803  0.181818  0.000000  0.324888  0.156277   \n",
            "2  0.176471  0.914573  0.606557  0.000000  0.000000  0.454545  0.114005   \n",
            "3  0.058824  0.909548  0.639344  0.424242  0.346336  0.596125  0.503843   \n",
            "4  0.058824  0.437186  0.557377  0.343434  0.091017  0.560358  0.137916   \n",
            "\n",
            "          7  \n",
            "0  0.100000  \n",
            "1  0.000000  \n",
            "2  0.133333  \n",
            "3  0.016667  \n",
            "4  0.050000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "k1 = 6;\n",
        "# k1 is the number of neighbors that would be considered to measures the distance of test (new) points to nearest neighbors in data\n",
        "\n",
        "c1 = KNeighborsClassifier(n_neighbors=k1 , metric = 'euclidean')\n",
        "# It selects k-nearest data points after that based on those nearest points, the new data point would be assigned the class of majority data points.\n",
        "knnmodel = c1.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "Aray_-fY6fLQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import plot_confusion_matrix\n",
        "import matplotlib\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "matplotlib.use(\"agg\")\n",
        "figure2 = plt.figure()\n",
        "ax = figure2.gca()\n",
        "plot_confusion_matrix(knnmodel, X_test, y_test,ax=ax)  \n",
        "figure2.savefig(\"cfm.jpg\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "L0t0VhLk7NhZ",
        "outputId": "5d48d6b3-0130-449e-ef4e-62a11bae7699"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = c1.predict(X_test)\n",
        "print('true values:')\n",
        "print(pd.DataFrame(y_test).head(),'\\n')\n",
        "print('predicted values:')\n",
        "print(pd.DataFrame(y_pred).head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZNOAZKJx7dU2",
        "outputId": "b4ed8d47-57f3-40b7-d3c9-ccb04c67d95b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "true values:\n",
            "     Outcome\n",
            "101        0\n",
            "352        0\n",
            "281        0\n",
            "636        0\n",
            "424        1 \n",
            "\n",
            "predicted values:\n",
            "   0\n",
            "0  0\n",
            "1  0\n",
            "2  1\n",
            "3  1\n",
            "4  1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range (20): # range (1,9,2):\n",
        " c2 = KNeighborsClassifier(n_neighbors=i+1)\n",
        " c2.fit(X_train, y_train)\n",
        " print(\"For k = %d accuracy is\"%(i+1), c2.score(X_test,y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wWuQGJBA7mNS",
        "outputId": "802e8c3f-2ca5-408d-9453-42376cc99214"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "For k = 1 accuracy is 0.7186147186147186\n",
            "For k = 2 accuracy is 0.70995670995671\n",
            "For k = 3 accuracy is 0.7359307359307359\n",
            "For k = 4 accuracy is 0.7489177489177489\n",
            "For k = 5 accuracy is 0.7316017316017316\n",
            "For k = 6 accuracy is 0.7445887445887446\n",
            "For k = 7 accuracy is 0.7272727272727273\n",
            "For k = 8 accuracy is 0.7359307359307359\n",
            "For k = 9 accuracy is 0.7186147186147186\n",
            "For k = 10 accuracy is 0.7272727272727273\n",
            "For k = 11 accuracy is 0.7272727272727273\n",
            "For k = 12 accuracy is 0.7489177489177489\n",
            "For k = 13 accuracy is 0.7532467532467533\n",
            "For k = 14 accuracy is 0.7575757575757576\n",
            "For k = 15 accuracy is 0.7532467532467533\n",
            "For k = 16 accuracy is 0.7489177489177489\n",
            "For k = 17 accuracy is 0.7445887445887446\n",
            "For k = 18 accuracy is 0.7445887445887446\n",
            "For k = 19 accuracy is 0.7445887445887446\n",
            "For k = 20 accuracy is 0.7489177489177489\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "k = 14;\n",
        "c3 = KNeighborsClassifier(n_neighbors=k , metric = 'euclidean')\n",
        "knnmodel = c3.fit(X_train, y_train)\n",
        "print(c3.score(X_test,y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "14JxJjCS7xDl",
        "outputId": "a211302d-f5f6-4742-bbf8-78201e0044cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7575757575757576\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "scores = cross_val_score(c3, X, y, cv=5)\n",
        "\n",
        "print('Accuracy for each fold is:' , scores)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OkEw5N9Q744O",
        "outputId": "e35f2da8-1022-4530-cc00-40c6e771d3e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy for each fold is: [0.66883117 0.68181818 0.70779221 0.7124183  0.66013072]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Average accuracy is:' , scores.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5MPPSovy8BDl",
        "outputId": "5b57234d-f5c4-4bfb-89d9-8481388567ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average accuracy is: 0.6861981156098803\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "\n",
        "scores = cross_val_score(c3, X, y, cv=5, scoring='precision')\n",
        "print('Average precision is:' , scores.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HYhiq7Yl8E9e",
        "outputId": "8dceb841-1022-4eee-a9d7-f477bdd54391"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average precision is: 0.6004315751531899\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_validate\n",
        "scoring = ['precision', 'recall', 'accuracy']\n",
        "c4 = KNeighborsClassifier(n_neighbors=1, metric='euclidean')\n",
        "scores = cross_validate(c4, X, y,cv=5, scoring=scoring)\n",
        "scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "03d1ebVq8N8T",
        "outputId": "c7365d94-c03a-4162-be99-bdce2dfb694b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'fit_time': array([0.00847816, 0.00252914, 0.00236773, 0.00211978, 0.00205493]),\n",
              " 'score_time': array([0.02428436, 0.01312947, 0.01142883, 0.01123667, 0.01593661]),\n",
              " 'test_accuracy': array([0.63636364, 0.58441558, 0.66233766, 0.63398693, 0.55555556]),\n",
              " 'test_precision': array([0.48214286, 0.41666667, 0.52272727, 0.47169811, 0.37288136]),\n",
              " 'test_recall': array([0.5       , 0.46296296, 0.42592593, 0.47169811, 0.41509434])}"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "tPrec = np.mean(scores['test_precision'])\n",
        "tRec = np.mean(scores['test_recall'])\n",
        "tAcc = np.mean(scores['test_accuracy'])\n",
        "\n",
        "print('Average precision is:' , tPrec)\n",
        "print('Average recall is:' , tRec)\n",
        "print('Average accuracy is:' , tAcc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_zSByVgM8XUm",
        "outputId": "ec61ba87-1161-48a0-a64c-56c6509b8132"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average precision is: 0.4532232531353094\n",
            "Average recall is: 0.4551362683438155\n",
            "Average accuracy is: 0.6145318733554028\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import plot_precision_recall_curve\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "c5 = KNeighborsClassifier(n_neighbors=1, metric='euclidean')\n",
        "c5.fit(X_train, y_train)\n",
        "disp = plot_precision_recall_curve(c5, X_test, y_test)\n",
        "disp.ax_.set_title('2-class Precision-Recall curve')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 371
        },
        "id": "eI0yeTVg8q9l",
        "outputId": "1f2cf223-8039-4c72-c0ea-c68f78e8e807"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_precision_recall_curve is deprecated; Function `plot_precision_recall_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: PrecisionRecallDisplay.from_predictions or PrecisionRecallDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, '2-class Precision-Recall curve')"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}